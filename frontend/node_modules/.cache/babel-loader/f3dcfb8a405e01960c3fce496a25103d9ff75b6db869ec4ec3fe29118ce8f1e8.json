{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '../config';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Health check\nexport const checkHealth = async signal => {\n  const response = await api.get('/health', {\n    signal\n  });\n  return response.data;\n};\n\n// Upload inventory report\nexport const uploadReport = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const response = await api.post('/upload-report', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// Get today's alerts\nexport const getTodayAlerts = async () => {\n  const response = await api.get('/alerts/today');\n  return response.data;\n};\n\n// Get recipients\nexport const getRecipients = async () => {\n  const response = await api.get('/recipients');\n  return response.data;\n};\n\n// Add recipient\nexport const addRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  formData.append('email', email);\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  const response = await api.post('/recipients', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// Update recipient\nexport const updateRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  const response = await api.put(`/recipients/${email}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// Delete recipient\nexport const deleteRecipient = async email => {\n  const response = await api.delete(`/recipients/${email}`);\n  return response.data;\n};\n\n// Get threshold setting\nexport const getThreshold = async () => {\n  const response = await api.get('/settings/threshold');\n  return response.data;\n};\n\n// Get upload history\nexport const getUploadHistory = async () => {\n  const response = await api.get('/upload-history');\n  return response.data;\n};\n\n// Get key items list\nexport const getKeyItemsList = async () => {\n  const response = await api.get('/key-items/list');\n  return response.data;\n};\n\n// Get specific key item alerts\nexport const getSpecificKeyItemAlerts = async itemName => {\n  const response = await api.get(`/key-items/${itemName}/alerts`);\n  return response.data;\n};\n\n// Email management functions\nexport const sendEmailAlert = async (itemName = null) => {\n  const formData = new FormData();\n  if (itemName) formData.append('item_name', itemName);\n  const response = await api.post('/email/send-alert', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport const sendItemSpecificAlert = async itemName => {\n  const response = await api.post(`/email/send-item-alert/${itemName}`);\n  return response.data;\n};\nexport const getEmailStatus = async () => {\n  const response = await api.get('/email/status');\n  return response.data;\n};\n\n// Enhanced file management and comparison functions\nexport const getEnhancedInventoryFiles = async () => {\n  const response = await api.get('/files/enhanced-list');\n  return response.data;\n};\nexport const getSmartPerformanceAnalysis = async (file1, file2) => {\n  const response = await api.get(`/files/smart-analysis/${file1}/${file2}`);\n  return response.data;\n};\nexport const getPerformanceAnalysis = async () => {\n  const response = await api.get('/files/performance-analysis');\n  return response.data;\n};\nexport const getFileArchive = async () => {\n  const response = await api.get('/files/archive');\n  return response.data;\n};\nexport const downloadArchiveFile = async filename => {\n  const response = await api.get(`/files/archive/${filename}/download`, {\n    responseType: 'blob'\n  });\n  return response.data;\n};\nexport const getFileAlerts = async filename => {\n  const response = await api.get(`/inventory-files/${filename}/alerts`);\n  return response.data;\n};\n\n// Get all key items with alerts in a single batch request\nexport const getAllKeyItemsWithAlerts = async () => {\n  const response = await api.get('/key-items/batch-alerts');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","checkHealth","signal","response","get","data","uploadReport","file","formData","FormData","append","post","getTodayAlerts","getRecipients","addRecipient","email","name","department","updateRecipient","put","deleteRecipient","delete","getThreshold","getUploadHistory","getKeyItemsList","getSpecificKeyItemAlerts","itemName","sendEmailAlert","sendItemSpecificAlert","getEmailStatus","getEnhancedInventoryFiles","getSmartPerformanceAnalysis","file1","file2","getPerformanceAnalysis","getFileArchive","downloadArchiveFile","filename","responseType","getFileAlerts","getAllKeyItemsWithAlerts"],"sources":["/Users/SarthakSethi/SOFTWARE FOR DANIER /danier-stock-alert/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL } from '../config';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Health check\nexport const checkHealth = async (signal) => {\n  const response = await api.get('/health', { signal });\n  return response.data;\n};\n\n// Upload inventory report\nexport const uploadReport = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  const response = await api.post('/upload-report', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// Get today's alerts\nexport const getTodayAlerts = async () => {\n  const response = await api.get('/alerts/today');\n  return response.data;\n};\n\n// Get recipients\nexport const getRecipients = async () => {\n  const response = await api.get('/recipients');\n  return response.data;\n};\n\n// Add recipient\nexport const addRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  formData.append('email', email);\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  \n  const response = await api.post('/recipients', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// Update recipient\nexport const updateRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  \n  const response = await api.put(`/recipients/${email}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// Delete recipient\nexport const deleteRecipient = async (email) => {\n  const response = await api.delete(`/recipients/${email}`);\n  return response.data;\n};\n\n// Get threshold setting\nexport const getThreshold = async () => {\n  const response = await api.get('/settings/threshold');\n  return response.data;\n};\n\n// Get upload history\nexport const getUploadHistory = async () => {\n  const response = await api.get('/upload-history');\n  return response.data;\n};\n\n// Get key items list\nexport const getKeyItemsList = async () => {\n  const response = await api.get('/key-items/list');\n  return response.data;\n};\n\n// Get specific key item alerts\nexport const getSpecificKeyItemAlerts = async (itemName) => {\n  const response = await api.get(`/key-items/${itemName}/alerts`);\n  return response.data;\n};\n\n// Email management functions\nexport const sendEmailAlert = async (itemName = null) => {\n  const formData = new FormData();\n  if (itemName) formData.append('item_name', itemName);\n  \n  const response = await api.post('/email/send-alert', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\nexport const sendItemSpecificAlert = async (itemName) => {\n  const response = await api.post(`/email/send-item-alert/${itemName}`);\n  return response.data;\n};\n\nexport const getEmailStatus = async () => {\n  const response = await api.get('/email/status');\n  return response.data;\n};\n\n// Enhanced file management and comparison functions\nexport const getEnhancedInventoryFiles = async () => {\n  const response = await api.get('/files/enhanced-list');\n  return response.data;\n};\n\nexport const getSmartPerformanceAnalysis = async (file1, file2) => {\n  const response = await api.get(`/files/smart-analysis/${file1}/${file2}`);\n  return response.data;\n};\n\nexport const getPerformanceAnalysis = async () => {\n  const response = await api.get('/files/performance-analysis');\n  return response.data;\n};\n\nexport const getFileArchive = async () => {\n  const response = await api.get('/files/archive');\n  return response.data;\n};\n\nexport const downloadArchiveFile = async (filename) => {\n  const response = await api.get(`/files/archive/${filename}/download`, {\n    responseType: 'blob'\n  });\n  return response.data;\n};\n\nexport const getFileAlerts = async (filename) => {\n  const response = await api.get(`/inventory-files/${filename}/alerts`);\n  return response.data;\n};\n\n// Get all key items with alerts in a single batch request\nexport const getAllKeyItemsWithAlerts = async () => {\n  const response = await api.get('/key-items/batch-alerts');\n  return response.data;\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}