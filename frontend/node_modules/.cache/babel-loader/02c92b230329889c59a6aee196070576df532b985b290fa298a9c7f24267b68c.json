{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Upload inventory report\nexport const uploadReport = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const response = await api.post('/upload-report', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// Get today's alerts\nexport const getTodayAlerts = async () => {\n  const response = await api.get('/alerts/today');\n  return response.data;\n};\n\n// Get recipients\nexport const getRecipients = async () => {\n  const response = await api.get('/recipients');\n  return response.data;\n};\n\n// Add recipient\nexport const addRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  formData.append('email', email);\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  const response = await api.post('/recipients', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// Update recipient\nexport const updateRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  const response = await api.put(`/recipients/${email}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// Delete recipient\nexport const deleteRecipient = async email => {\n  const response = await api.delete(`/recipients/${email}`);\n  return response.data;\n};\n\n// Get threshold setting\nexport const getThreshold = async () => {\n  const response = await api.get('/settings/threshold');\n  return response.data;\n};\n\n// Get upload history\nexport const getUploadHistory = async () => {\n  const response = await api.get('/upload-history');\n  return response.data;\n};\n\n// Get key items list\nexport const getKeyItemsList = async () => {\n  const response = await api.get('/key-items/list');\n  return response.data;\n};\n\n// Get specific key item alerts\nexport const getSpecificKeyItemAlerts = async itemName => {\n  const response = await api.get(`/key-items/${itemName}/alerts`);\n  return response.data;\n};\n\n// Email management functions\nexport const sendEmailAlert = async (itemName = null) => {\n  const formData = new FormData();\n  if (itemName) formData.append('item_name', itemName);\n  const response = await api.post('/email/send-alert', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport const sendItemSpecificAlert = async itemName => {\n  const response = await api.post(`/email/send-item-alert/${itemName}`);\n  return response.data;\n};\nexport const getEmailStatus = async () => {\n  const response = await api.get('/email/status');\n  return response.data;\n};\n\n// Enhanced file management and comparison functions\nexport const getEnhancedInventoryFiles = async () => {\n  const response = await api.get('/files/enhanced-list');\n  return response.data;\n};\nexport const getSmartPerformanceAnalysis = async (file1, file2) => {\n  const response = await api.get(`/files/smart-analysis/${file1}/${file2}`);\n  return response.data;\n};\nexport const getPerformanceAnalysis = async () => {\n  const response = await api.get('/files/performance-analysis');\n  return response.data;\n};\nexport const getFileArchive = async () => {\n  const response = await api.get('/files/archive');\n  return response.data;\n};\nexport const downloadArchiveFile = async filename => {\n  const response = await api.get(`/files/archive/${filename}/download`, {\n    responseType: 'blob'\n  });\n  return response.data;\n};\nexport const getFileAlerts = async filename => {\n  const response = await api.get(`/inventory-files/${filename}/alerts`);\n  return response.data;\n};\n\n// Get all key items with alerts in a single batch request\nexport const getAllKeyItemsWithAlerts = async () => {\n  const response = await api.get('/key-items/batch-alerts');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","uploadReport","file","formData","FormData","append","response","post","data","getTodayAlerts","get","getRecipients","addRecipient","email","name","department","updateRecipient","put","deleteRecipient","delete","getThreshold","getUploadHistory","getKeyItemsList","getSpecificKeyItemAlerts","itemName","sendEmailAlert","sendItemSpecificAlert","getEmailStatus","getEnhancedInventoryFiles","getSmartPerformanceAnalysis","file1","file2","getPerformanceAnalysis","getFileArchive","downloadArchiveFile","filename","responseType","getFileAlerts","getAllKeyItemsWithAlerts"],"sources":["/Users/SarthakSethi/SOFTWARE FOR DANIER /danier-stock-alert/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Upload inventory report\nexport const uploadReport = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  const response = await api.post('/upload-report', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// Get today's alerts\nexport const getTodayAlerts = async () => {\n  const response = await api.get('/alerts/today');\n  return response.data;\n};\n\n// Get recipients\nexport const getRecipients = async () => {\n  const response = await api.get('/recipients');\n  return response.data;\n};\n\n// Add recipient\nexport const addRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  formData.append('email', email);\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  \n  const response = await api.post('/recipients', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// Update recipient\nexport const updateRecipient = async (email, name, department) => {\n  const formData = new FormData();\n  if (name) formData.append('name', name);\n  if (department) formData.append('department', department);\n  \n  const response = await api.put(`/recipients/${email}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// Delete recipient\nexport const deleteRecipient = async (email) => {\n  const response = await api.delete(`/recipients/${email}`);\n  return response.data;\n};\n\n// Get threshold setting\nexport const getThreshold = async () => {\n  const response = await api.get('/settings/threshold');\n  return response.data;\n};\n\n// Get upload history\nexport const getUploadHistory = async () => {\n  const response = await api.get('/upload-history');\n  return response.data;\n};\n\n// Get key items list\nexport const getKeyItemsList = async () => {\n  const response = await api.get('/key-items/list');\n  return response.data;\n};\n\n// Get specific key item alerts\nexport const getSpecificKeyItemAlerts = async (itemName) => {\n  const response = await api.get(`/key-items/${itemName}/alerts`);\n  return response.data;\n};\n\n// Email management functions\nexport const sendEmailAlert = async (itemName = null) => {\n  const formData = new FormData();\n  if (itemName) formData.append('item_name', itemName);\n  \n  const response = await api.post('/email/send-alert', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\nexport const sendItemSpecificAlert = async (itemName) => {\n  const response = await api.post(`/email/send-item-alert/${itemName}`);\n  return response.data;\n};\n\nexport const getEmailStatus = async () => {\n  const response = await api.get('/email/status');\n  return response.data;\n};\n\n// Enhanced file management and comparison functions\nexport const getEnhancedInventoryFiles = async () => {\n  const response = await api.get('/files/enhanced-list');\n  return response.data;\n};\n\nexport const getSmartPerformanceAnalysis = async (file1, file2) => {\n  const response = await api.get(`/files/smart-analysis/${file1}/${file2}`);\n  return response.data;\n};\n\nexport const getPerformanceAnalysis = async () => {\n  const response = await api.get('/files/performance-analysis');\n  return response.data;\n};\n\nexport const getFileArchive = async () => {\n  const response = await api.get('/files/archive');\n  return response.data;\n};\n\nexport const downloadArchiveFile = async (filename) => {\n  const response = await api.get(`/files/archive/${filename}/download`, {\n    responseType: 'blob'\n  });\n  return response.data;\n};\n\nexport const getFileAlerts = async (filename) => {\n  const response = await api.get(`/inventory-files/${filename}/alerts`);\n  return response.data;\n};\n\n// Get all key items with alerts in a single batch request\nexport const getAllKeyItemsWithAlerts = async () => {\n  const response = await api.get('/key-items/batch-alerts');\n  return response.data;\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}