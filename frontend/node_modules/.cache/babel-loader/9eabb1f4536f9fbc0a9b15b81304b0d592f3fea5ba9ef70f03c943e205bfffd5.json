{"ast":null,"code":"import { API_BASE_URL } from '../config';\n\n// Enhanced API service with retry logic and better error handling\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n    this.maxRetries = 3;\n    this.retryDelay = 1000; // 1 second\n  }\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n\n    // Add timeout to all requests\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n    const requestOptions = {\n      ...options,\n      signal: controller.signal,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    };\n    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n      try {\n        const response = await fetch(url, requestOptions);\n        clearTimeout(timeoutId);\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return await response.json();\n      } catch (error) {\n        console.log(`API attempt ${attempt}/${this.maxRetries} failed:`, error.message);\n        if (attempt === this.maxRetries) {\n          clearTimeout(timeoutId);\n          throw error;\n        }\n\n        // Wait before retrying (exponential backoff)\n        await new Promise(resolve => setTimeout(resolve, this.retryDelay * attempt));\n      }\n    }\n  }\n  async checkHealth(signal) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout for health check\n\n      if (signal) {\n        signal.addEventListener('abort', () => controller.abort());\n      }\n      const response = await fetch(`${this.baseUrl}/health`, {\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Health check error:', error);\n      throw error;\n    }\n  }\n  async uploadReport(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout for uploads\n\n    try {\n      const response = await fetch(`${this.baseUrl}/upload-report`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Upload failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Upload error:', error);\n      throw error;\n    }\n  }\n\n  // Key Items and Alerts\n  async getAllKeyItemsWithAlerts() {\n    return this.makeRequest('/key-items/batch-alerts');\n  }\n  async getKeyItemsSummary() {\n    return this.makeRequest('/key-items/summary');\n  }\n  async getKeyItemsList() {\n    return this.makeRequest('/key-items/list');\n  }\n  async getSpecificKeyItemAlerts(itemName) {\n    return this.makeRequest(`/key-items/${encodeURIComponent(itemName)}/alerts`);\n  }\n\n  // File Management\n  async getInventoryFiles() {\n    return this.makeRequest('/inventory-files');\n  }\n  async getEnhancedInventoryFiles() {\n    return this.makeRequest('/files/enhanced-list');\n  }\n  async getSmartPerformanceAnalysis(file1, file2) {\n    return this.makeRequest(`/files/smart-analysis/${file1}/${file2}`);\n  }\n  async getPerformanceAnalysis() {\n    return this.makeRequest('/files/performance-analysis');\n  }\n  async getFileArchive() {\n    return this.makeRequest('/files/archive');\n  }\n  async downloadArchiveFile(filename) {\n    const response = await fetch(`${this.baseUrl}/files/archive/${encodeURIComponent(filename)}/download`);\n    return response.blob();\n  }\n  async getFileAlerts(filename) {\n    return this.makeRequest(`/inventory-files/${encodeURIComponent(filename)}/alerts`);\n  }\n\n  // Search\n  async searchArticle(searchTerm) {\n    return this.makeRequest(`/search/article/${encodeURIComponent(searchTerm)}`);\n  }\n\n  // Email Management\n  async sendEmailAlert(itemName = null) {\n    const formData = new FormData();\n    if (itemName) formData.append('item_name', itemName);\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    try {\n      const response = await fetch(`${this.baseUrl}/email/send-alert`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Email alert failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Email alert error:', error);\n      throw error;\n    }\n  }\n  async sendItemSpecificAlert(itemName) {\n    return this.makeRequest(`/email/send-item-alert/${encodeURIComponent(itemName)}`, {\n      method: 'POST'\n    });\n  }\n  async getEmailStatus() {\n    return this.makeRequest('/email/status');\n  }\n\n  // Recipients Management\n  async getRecipients() {\n    return this.makeRequest('/recipients');\n  }\n  async addRecipient(email, name, department) {\n    const formData = new FormData();\n    formData.append('email', email);\n    if (name) formData.append('name', name);\n    if (department) formData.append('department', department);\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    try {\n      const response = await fetch(`${this.baseUrl}/recipients`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Add recipient failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Add recipient error:', error);\n      throw error;\n    }\n  }\n  async updateRecipient(email, name, department) {\n    const formData = new FormData();\n    if (name) formData.append('name', name);\n    if (department) formData.append('department', department);\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    try {\n      const response = await fetch(`${this.baseUrl}/recipients/${encodeURIComponent(email)}`, {\n        method: 'PUT',\n        body: formData,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Update recipient failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Update recipient error:', error);\n      throw error;\n    }\n  }\n  async deleteRecipient(email) {\n    return this.makeRequest(`/recipients/${encodeURIComponent(email)}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Threshold Management\n  async getThresholdAnalysis() {\n    return this.makeRequest('/threshold-analysis');\n  }\n  async getThresholdAnalysisForFile(filename) {\n    return this.makeRequest(`/threshold-analysis/${encodeURIComponent(filename)}`);\n  }\n  async setCustomThreshold(itemName, size, color, threshold) {\n    const formData = new FormData();\n    formData.append('item_name', itemName);\n    formData.append('size', size);\n    formData.append('color', color);\n    formData.append('threshold', threshold.toString());\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    try {\n      const response = await fetch(`${this.baseUrl}/thresholds/set`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Failed to set threshold: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Set threshold error:', error);\n      throw error;\n    }\n  }\n  async getCustomThreshold(itemName, size, color) {\n    return this.makeRequest(`/thresholds/get/${encodeURIComponent(itemName)}/${encodeURIComponent(size)}/${encodeURIComponent(color)}`);\n  }\n  async getAllCustomThresholds() {\n    return this.makeRequest('/thresholds/all');\n  }\n  async resetCustomThreshold(itemName, size, color) {\n    return this.makeRequest(`/thresholds/reset/${encodeURIComponent(itemName)}/${encodeURIComponent(size)}/${encodeURIComponent(color)}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Settings and History\n  async getThreshold() {\n    return this.makeRequest('/settings/threshold');\n  }\n  async getUploadHistory() {\n    return this.makeRequest('/upload-history');\n  }\n  async getTodayAlerts() {\n    return this.makeRequest('/alerts/today');\n  }\n\n  // Cache Management\n  async clearCache() {\n    return this.makeRequest('/clear-cache', {\n      method: 'POST'\n    });\n  }\n}\n\n// Create singleton instance\nconst apiService = new ApiService();\n\n// Export individual functions for backward compatibility\nexport const checkHealth = signal => apiService.checkHealth(signal);\nexport const uploadReport = file => apiService.uploadReport(file);\nexport const getAllKeyItemsWithAlerts = () => apiService.getAllKeyItemsWithAlerts();\nexport const getKeyItemsSummary = () => apiService.getKeyItemsSummary();\nexport const getKeyItemsList = () => apiService.getKeyItemsList();\nexport const getSpecificKeyItemAlerts = itemName => apiService.getSpecificKeyItemAlerts(itemName);\nexport const getInventoryFiles = () => apiService.getInventoryFiles();\nexport const getEnhancedInventoryFiles = () => apiService.getEnhancedInventoryFiles();\nexport const getSmartPerformanceAnalysis = (file1, file2) => apiService.getSmartPerformanceAnalysis(file1, file2);\nexport const getPerformanceAnalysis = () => apiService.getPerformanceAnalysis();\nexport const getFileArchive = () => apiService.getFileArchive();\nexport const downloadArchiveFile = filename => apiService.downloadArchiveFile(filename);\nexport const getFileAlerts = filename => apiService.getFileAlerts(filename);\nexport const searchArticle = searchTerm => apiService.searchArticle(searchTerm);\nexport const sendEmailAlert = itemName => apiService.sendEmailAlert(itemName);\nexport const sendItemSpecificAlert = itemName => apiService.sendItemSpecificAlert(itemName);\nexport const getEmailStatus = () => apiService.getEmailStatus();\nexport const getRecipients = () => apiService.getRecipients();\nexport const addRecipient = (email, name, department) => apiService.addRecipient(email, name, department);\nexport const updateRecipient = (email, name, department) => apiService.updateRecipient(email, name, department);\nexport const deleteRecipient = email => apiService.deleteRecipient(email);\nexport const getThresholdAnalysis = () => apiService.getThresholdAnalysis();\nexport const getThresholdAnalysisForFile = filename => apiService.getThresholdAnalysisForFile(filename);\nexport const setCustomThreshold = (itemName, size, color, threshold) => apiService.setCustomThreshold(itemName, size, color, threshold);\nexport const getCustomThreshold = (itemName, size, color) => apiService.getCustomThreshold(itemName, size, color);\nexport const getAllCustomThresholds = () => apiService.getAllCustomThresholds();\nexport const resetCustomThreshold = (itemName, size, color) => apiService.resetCustomThreshold(itemName, size, color);\nexport const getThreshold = () => apiService.getThreshold();\nexport const getUploadHistory = () => apiService.getUploadHistory();\nexport const getTodayAlerts = () => apiService.getTodayAlerts();\nexport const clearCache = () => apiService.clearCache();\n\n// Export the service instance for advanced usage\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseUrl","maxRetries","retryDelay","makeRequest","endpoint","options","url","controller","AbortController","timeoutId","setTimeout","abort","requestOptions","signal","headers","attempt","response","fetch","clearTimeout","ok","Error","status","statusText","json","error","console","log","message","Promise","resolve","checkHealth","addEventListener","uploadReport","file","formData","FormData","append","method","body","errorData","catch","detail","getAllKeyItemsWithAlerts","getKeyItemsSummary","getKeyItemsList","getSpecificKeyItemAlerts","itemName","encodeURIComponent","getInventoryFiles","getEnhancedInventoryFiles","getSmartPerformanceAnalysis","file1","file2","getPerformanceAnalysis","getFileArchive","downloadArchiveFile","filename","blob","getFileAlerts","searchArticle","searchTerm","sendEmailAlert","sendItemSpecificAlert","getEmailStatus","getRecipients","addRecipient","email","name","department","updateRecipient","deleteRecipient","getThresholdAnalysis","getThresholdAnalysisForFile","setCustomThreshold","size","color","threshold","toString","getCustomThreshold","getAllCustomThresholds","resetCustomThreshold","getThreshold","getUploadHistory","getTodayAlerts","clearCache","apiService"],"sources":["/Users/SarthakSethi/SOFTWARE FOR DANIER /danier-stock-alert/frontend/src/services/api.js"],"sourcesContent":["import { API_BASE_URL } from '../config';\n\n// Enhanced API service with retry logic and better error handling\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n    this.maxRetries = 3;\n    this.retryDelay = 1000; // 1 second\n  }\n\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    // Add timeout to all requests\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n    \n    const requestOptions = {\n      ...options,\n      signal: controller.signal,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    };\n\n    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n      try {\n        const response = await fetch(url, requestOptions);\n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        return await response.json();\n      } catch (error) {\n        console.log(`API attempt ${attempt}/${this.maxRetries} failed:`, error.message);\n        \n        if (attempt === this.maxRetries) {\n          clearTimeout(timeoutId);\n          throw error;\n        }\n        \n        // Wait before retrying (exponential backoff)\n        await new Promise(resolve => setTimeout(resolve, this.retryDelay * attempt));\n      }\n    }\n  }\n\n  async checkHealth(signal) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout for health check\n      \n      if (signal) {\n        signal.addEventListener('abort', () => controller.abort());\n      }\n      \n      const response = await fetch(`${this.baseUrl}/health`, { \n        signal: controller.signal \n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Health check error:', error);\n      throw error;\n    }\n  }\n\n  async uploadReport(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout for uploads\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/upload-report`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Upload failed: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Upload error:', error);\n      throw error;\n    }\n  }\n\n  // Key Items and Alerts\n  async getAllKeyItemsWithAlerts() {\n    return this.makeRequest('/key-items/batch-alerts');\n  }\n\n  async getKeyItemsSummary() {\n    return this.makeRequest('/key-items/summary');\n  }\n\n  async getKeyItemsList() {\n    return this.makeRequest('/key-items/list');\n  }\n\n  async getSpecificKeyItemAlerts(itemName) {\n    return this.makeRequest(`/key-items/${encodeURIComponent(itemName)}/alerts`);\n  }\n\n  // File Management\n  async getInventoryFiles() {\n    return this.makeRequest('/inventory-files');\n  }\n\n  async getEnhancedInventoryFiles() {\n    return this.makeRequest('/files/enhanced-list');\n  }\n\n  async getSmartPerformanceAnalysis(file1, file2) {\n    return this.makeRequest(`/files/smart-analysis/${file1}/${file2}`);\n  }\n\n  async getPerformanceAnalysis() {\n    return this.makeRequest('/files/performance-analysis');\n  }\n\n  async getFileArchive() {\n    return this.makeRequest('/files/archive');\n  }\n\n  async downloadArchiveFile(filename) {\n    const response = await fetch(`${this.baseUrl}/files/archive/${encodeURIComponent(filename)}/download`);\n    return response.blob();\n  }\n\n  async getFileAlerts(filename) {\n    return this.makeRequest(`/inventory-files/${encodeURIComponent(filename)}/alerts`);\n  }\n\n  // Search\n  async searchArticle(searchTerm) {\n    return this.makeRequest(`/search/article/${encodeURIComponent(searchTerm)}`);\n  }\n\n  // Email Management\n  async sendEmailAlert(itemName = null) {\n    const formData = new FormData();\n    if (itemName) formData.append('item_name', itemName);\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/email/send-alert`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Email alert failed: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Email alert error:', error);\n      throw error;\n    }\n  }\n\n  async sendItemSpecificAlert(itemName) {\n    return this.makeRequest(`/email/send-item-alert/${encodeURIComponent(itemName)}`, {\n      method: 'POST',\n    });\n  }\n\n  async getEmailStatus() {\n    return this.makeRequest('/email/status');\n  }\n\n  // Recipients Management\n  async getRecipients() {\n    return this.makeRequest('/recipients');\n  }\n\n  async addRecipient(email, name, department) {\n    const formData = new FormData();\n    formData.append('email', email);\n    if (name) formData.append('name', name);\n    if (department) formData.append('department', department);\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/recipients`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Add recipient failed: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Add recipient error:', error);\n      throw error;\n    }\n  }\n\n  async updateRecipient(email, name, department) {\n    const formData = new FormData();\n    if (name) formData.append('name', name);\n    if (department) formData.append('department', department);\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/recipients/${encodeURIComponent(email)}`, {\n        method: 'PUT',\n        body: formData,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Update recipient failed: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Update recipient error:', error);\n      throw error;\n    }\n  }\n\n  async deleteRecipient(email) {\n    return this.makeRequest(`/recipients/${encodeURIComponent(email)}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Threshold Management\n  async getThresholdAnalysis() {\n    return this.makeRequest('/threshold-analysis');\n  }\n\n  async getThresholdAnalysisForFile(filename) {\n    return this.makeRequest(`/threshold-analysis/${encodeURIComponent(filename)}`);\n  }\n\n  async setCustomThreshold(itemName, size, color, threshold) {\n    const formData = new FormData();\n    formData.append('item_name', itemName);\n    formData.append('size', size);\n    formData.append('color', color);\n    formData.append('threshold', threshold.toString());\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/thresholds/set`, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `Failed to set threshold: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('Set threshold error:', error);\n      throw error;\n    }\n  }\n\n  async getCustomThreshold(itemName, size, color) {\n    return this.makeRequest(`/thresholds/get/${encodeURIComponent(itemName)}/${encodeURIComponent(size)}/${encodeURIComponent(color)}`);\n  }\n\n  async getAllCustomThresholds() {\n    return this.makeRequest('/thresholds/all');\n  }\n\n  async resetCustomThreshold(itemName, size, color) {\n    return this.makeRequest(`/thresholds/reset/${encodeURIComponent(itemName)}/${encodeURIComponent(size)}/${encodeURIComponent(color)}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Settings and History\n  async getThreshold() {\n    return this.makeRequest('/settings/threshold');\n  }\n\n  async getUploadHistory() {\n    return this.makeRequest('/upload-history');\n  }\n\n  async getTodayAlerts() {\n    return this.makeRequest('/alerts/today');\n  }\n\n  // Cache Management\n  async clearCache() {\n    return this.makeRequest('/clear-cache', {\n      method: 'POST',\n    });\n  }\n}\n\n// Create singleton instance\nconst apiService = new ApiService();\n\n// Export individual functions for backward compatibility\nexport const checkHealth = (signal) => apiService.checkHealth(signal);\nexport const uploadReport = (file) => apiService.uploadReport(file);\nexport const getAllKeyItemsWithAlerts = () => apiService.getAllKeyItemsWithAlerts();\nexport const getKeyItemsSummary = () => apiService.getKeyItemsSummary();\nexport const getKeyItemsList = () => apiService.getKeyItemsList();\nexport const getSpecificKeyItemAlerts = (itemName) => apiService.getSpecificKeyItemAlerts(itemName);\nexport const getInventoryFiles = () => apiService.getInventoryFiles();\nexport const getEnhancedInventoryFiles = () => apiService.getEnhancedInventoryFiles();\nexport const getSmartPerformanceAnalysis = (file1, file2) => apiService.getSmartPerformanceAnalysis(file1, file2);\nexport const getPerformanceAnalysis = () => apiService.getPerformanceAnalysis();\nexport const getFileArchive = () => apiService.getFileArchive();\nexport const downloadArchiveFile = (filename) => apiService.downloadArchiveFile(filename);\nexport const getFileAlerts = (filename) => apiService.getFileAlerts(filename);\nexport const searchArticle = (searchTerm) => apiService.searchArticle(searchTerm);\nexport const sendEmailAlert = (itemName) => apiService.sendEmailAlert(itemName);\nexport const sendItemSpecificAlert = (itemName) => apiService.sendItemSpecificAlert(itemName);\nexport const getEmailStatus = () => apiService.getEmailStatus();\nexport const getRecipients = () => apiService.getRecipients();\nexport const addRecipient = (email, name, department) => apiService.addRecipient(email, name, department);\nexport const updateRecipient = (email, name, department) => apiService.updateRecipient(email, name, department);\nexport const deleteRecipient = (email) => apiService.deleteRecipient(email);\nexport const getThresholdAnalysis = () => apiService.getThresholdAnalysis();\nexport const getThresholdAnalysisForFile = (filename) => apiService.getThresholdAnalysisForFile(filename);\nexport const setCustomThreshold = (itemName, size, color, threshold) => apiService.setCustomThreshold(itemName, size, color, threshold);\nexport const getCustomThreshold = (itemName, size, color) => apiService.getCustomThreshold(itemName, size, color);\nexport const getAllCustomThresholds = () => apiService.getAllCustomThresholds();\nexport const resetCustomThreshold = (itemName, size, color) => apiService.resetCustomThreshold(itemName, size, color);\nexport const getThreshold = () => apiService.getThreshold();\nexport const getUploadHistory = () => apiService.getUploadHistory();\nexport const getTodayAlerts = () => apiService.getTodayAlerts();\nexport const clearCache = () => apiService.clearCache();\n\n// Export the service instance for advanced usage\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}